apply plugin: 'com.android.application'

android {
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion app.buildToolsVersion
    defaultConfig {
        multiDexEnabled true
        applicationId app.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    compileOptions {
        sourceCompatibility app.sourceCompatibility
        targetCompatibility app.targetCompatibility
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/ASL2.0'
    }



    signingConfigs {
        release {
            Properties properties = new Properties()
            InputStream inputStream = rootProject.file('local.properties').newDataInputStream()
            properties.load(inputStream)

            keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
            keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            storeFile file(properties.getProperty('RELEASE_STOREFILE'))
            storePassword properties.getProperty('RELEASE_STOREPASSWORD')
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = releaseTime()
            def applicationId = variant.applicationId
            def versionName = defaultConfig.versionName
            def versionCode = defaultConfig.versionCode
            def debugType = variant.buildType.name
            outputFileName = "${debugType}_${versionName}_${date}_${applicationId}.apk"
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':library')
    annotationProcessor thirdDependencies.arouter_compiler
    annotationProcessor thirdDependencies.butterknife_compiler
}


def releaseTime() {
    return new Date().format("MMdd_hhmm", TimeZone.getTimeZone("Asia/Shanghai"))
}
